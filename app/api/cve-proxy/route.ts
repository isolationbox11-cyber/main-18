import { type NextRequest, NextResponse } from "next/server"

// Server-side CVE API proxy to handle CORS issues
export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const action = searchParams.get("action")
  const product = searchParams.get("product")
  const cveId = searchParams.get("cveId")

  try {
    if (action === "search" && product) {
      // Search CVEs by product using CIRCL API
      const cleanProduct = product.trim().toLowerCase()

      // Try direct product search first
      let url = `http://cve.circl.lu/api/search/${encodeURIComponent(cleanProduct)}`
      let response = await fetch(url, {
        headers: {
          Accept: "application/json",
          "User-Agent": "CyberWatchVault/3.0",
        },
      })

      // If direct search fails, try with common vendors
      if (!response.ok) {
        const commonVendors = ["apache", "microsoft", "google", "oracle", "cisco", "adobe"]
        for (const vendor of commonVendors) {
          url = `http://cve.circl.lu/api/search/${vendor}/${encodeURIComponent(cleanProduct)}`
          response = await fetch(url, {
            headers: {
              Accept: "application/json",
              "User-Agent": "CyberWatchVault/3.0",
            },
          })
          if (response.ok) break
        }
      }

      if (response.ok) {
        const data = await response.json()
        return NextResponse.json(data)
      }
    }

    if (action === "cve" && cveId) {
      // Get specific CVE details
      const url = `http://cve.circl.lu/api/cve/${cveId}`
      const response = await fetch(url, {
        headers: {
          Accept: "application/json",
          "User-Agent": "CyberWatchVault/3.0",
        },
      })

      if (response.ok) {
        const data = await response.json()
        return NextResponse.json(data)
      }
    }

    if (action === "browse") {
      // Browse vendors or products
      const url = product
        ? `http://cve.circl.lu/api/browse/${encodeURIComponent(product)}`
        : `http://cve.circl.lu/api/browse`

      const response = await fetch(url, {
        headers: {
          Accept: "application/json",
          "User-Agent": "CyberWatchVault/3.0",
        },
      })

      if (response.ok) {
        const data = await response.json()
        return NextResponse.json(data)
      }
    }

    return NextResponse.json({ error: "Invalid request or API unavailable" }, { status: 400 })
  } catch (error) {
    console.error("[CVE-PROXY] Error:", error)
    return NextResponse.json({ error: "Proxy request failed" }, { status: 500 })
  }
}
