"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Progress } from "@/components/ui/progress"
import {
  AlertTriangle,
  Shield,
  TrendingUp,
  Clock,
  ExternalLink,
  Zap,
  Target,
  Skull,
  Eye,
  Loader2,
  Activity,
  BarChart3,
  Calendar,
  Database,
  CheckCircle,
  XCircle,
  AlertCircle,
  Info,
  Gauge,
} from "lucide-react"
import {
  getComprehensiveProductIntelligence,
  getComprehensiveTrendingVulnerabilities,
  batchGetCVEDetailsComprehensive,
  getCVSSSeverityComprehensive,
  formatEPSSScoreComprehensive,
  calculateComprehensiveRiskScore,
  checkCVEDBHealthComprehensive,
  type CVEDetails,
  type CVEWithCPEs,
} from "@/lib/comprehensive-cvedb-client"

interface ComprehensiveCVEIntelligencePanelProps {
  product?: string
  cveIds?: string[]
}

export function ComprehensiveCVEIntelligencePanel({ product, cveIds }: ComprehensiveCVEIntelligencePanelProps) {
  const [vulnIntel, setVulnIntel] = useState<any>(null)
  const [cveDetails, setCveDetails] = useState<(CVEWithCPEs | null)[]>([])
  const [trendingCVEs, setTrendingCVEs] = useState<any>(null)
  const [apiHealth, setApiHealth] = useState<any>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState<"product" | "specific" | "trending" | "analytics" | "health">("product")

  useEffect(() => {
    checkAPIHealth()
    if (product) {
      loadComprehensiveProductIntelligence()
    }
    if (cveIds && cveIds.length > 0) {
      loadSpecificCVEs()
    }
    loadTrendingCVEs()
  }, [product, cveIds])

  const checkAPIHealth = async () => {
    try {
      const health = await checkCVEDBHealthComprehensive()
      setApiHealth(health)
    } catch (error) {
      console.error("Failed to check API health:", error)
    }
  }

  const loadComprehensiveProductIntelligence = async () => {
    if (!product) return

    setLoading(true)
    setError(null)
    try {
      console.log(`Starting comprehensive analysis for: ${product}`)
      const intel = await getComprehensiveProductIntelligence(product)
      setVulnIntel(intel)
      console.log(`Analysis complete:`, intel.summary)
    } catch (error) {
      console.error("Failed to load comprehensive product intelligence:", error)
      setError(error instanceof Error ? error.message : "Failed to load comprehensive product intelligence")
    } finally {
      setLoading(false)
    }
  }

  const loadSpecificCVEs = async () => {
    if (!cveIds || cveIds.length === 0) return

    setLoading(true)
    setError(null)
    try {
      const details = await batchGetCVEDetailsComprehensive(cveIds)
      setCveDetails(details)
    } catch (error) {
      console.error("Failed to load CVE details:", error)
      setError(error instanceof Error ? error.message : "Failed to load CVE details")
    } finally {
      setLoading(false)
    }
  }

  const loadTrendingCVEs = async () => {
    setError(null)
    try {
      const trending = await getComprehensiveTrendingVulnerabilities({
        daysBack: 7,
        limit: 20,
        minEpss: 0.05,
        getAllData: false,
      })
      setTrendingCVEs(trending)
    } catch (error) {
      console.error("Failed to load trending CVEs:", error)
      setError(error instanceof Error ? error.message : "Failed to load trending CVEs")
    }
  }

  const renderComprehensiveCVECard = (cve: CVEDetails, showRiskScore = true) => {
    const severity = getCVSSSeverityComprehensive(cve.cvss)
    const epssInfo = formatEPSSScoreComprehensive(cve.epss)
    const riskAnalysis = calculateComprehensiveRiskScore(cve)
    const isRecent = new Date(cve.published_time) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)

    return (
      <Card key={cve.cve_id} className="bg-slate-800/30 border-slate-600 hover:border-slate-500 transition-colors">
        <CardContent className="p-4">
          {/* Header */}
          <div className="flex items-start justify-between mb-3">
            <div className="flex items-center gap-2">
              <h4 className="font-mono text-cyan-400 font-medium text-lg">{cve.cve_id}</h4>
              {isRecent && (
                <Badge variant="outline" className="text-green-400 border-green-400 text-xs animate-pulse">
                  <Clock className="w-3 h-3 mr-1" />
                  NEW
                </Badge>
              )}
            </div>

            <div className="flex items-center gap-2">
              {cve.kev && (
                <Badge variant="destructive" className="text-xs bg-red-500/20 text-red-400 animate-pulse">
                  <Target className="w-3 h-3 mr-1" />
                  KEV
                </Badge>
              )}

              {cve.ransomware_campaign && (
                <Badge variant="destructive" className="text-xs bg-purple-500/20 text-purple-400">
                  <Skull className="w-3 h-3 mr-1" />
                  RANSOMWARE
                </Badge>
              )}

              <Badge className={`text-xs ${severity.color} border-current/30 bg-current/10`}>
                {severity.label} {cve.cvss?.toFixed(1)}
              </Badge>
            </div>
          </div>

          {/* Description */}
          <p className="text-slate-300 text-sm mb-4 line-clamp-3">{cve.summary || "No description available"}</p>

          {/* Risk Score */}
          {showRiskScore && (
            <div className="mb-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-white flex items-center gap-2">
                  <Gauge className="w-4 h-4" />
                  Comprehensive Risk Score
                </span>
                <span className="text-sm font-bold text-white">{riskAnalysis.score.toFixed(0)}/100</span>
              </div>
              <Progress
                value={riskAnalysis.score}
                className="h-3 mb-2"
                style={{
                  background: "rgba(51, 65, 85, 0.3)",
                }}
              />
              <div className="text-xs text-slate-400">
                Risk Level:{" "}
                <span
                  className={`font-medium ${
                    riskAnalysis.level === "critical"
                      ? "text-red-400"
                      : riskAnalysis.level === "high"
                        ? "text-orange-400"
                        : riskAnalysis.level === "medium"
                          ? "text-yellow-400"
                          : "text-green-400"
                  }`}
                >
                  {riskAnalysis.level.toUpperCase()}
                </span>
              </div>
            </div>
          )}

          {/* Metrics Grid */}
          <div className="grid grid-cols-2 gap-4 text-xs mb-4">
            <div className="space-y-2">
              <div>
                <span className="text-slate-400">CVSS Score:</span>
                <div className="flex items-center gap-2 mt-1">
                  <span className={`font-medium ${severity.color}`}>{cve.cvss?.toFixed(1) || "N/A"}</span>
                  <Badge variant="outline" className={`text-xs ${severity.color} border-current/30`}>
                    {severity.label}
                  </Badge>
                </div>
                <div className="text-xs text-slate-500 mt-1">{severity.actionRequired}</div>
              </div>
            </div>

            <div className="space-y-2">
              <div>
                <span className="text-slate-400">EPSS Score:</span>
                <div className="flex items-center gap-2 mt-1">
                  <span className="text-orange-400 font-medium">{epssInfo.percentage}</span>
                  <Badge
                    variant="outline"
                    className={`text-xs ${
                      epssInfo.riskLevel === "very-high"
                        ? "border-red-400 text-red-400"
                        : epssInfo.riskLevel === "high"
                          ? "border-orange-400 text-orange-400"
                          : epssInfo.riskLevel === "medium"
                            ? "border-yellow-400 text-yellow-400"
                            : "border-green-400 text-green-400"
                    }`}
                  >
                    {epssInfo.riskLevel.toUpperCase()}
                  </Badge>
                </div>
                <div className="text-xs text-slate-500 mt-1">{epssInfo.recommendedAction}</div>
              </div>
            </div>
          </div>

          {/* Additional Info */}
          <div className="grid grid-cols-2 gap-4 text-xs mb-4">
            <div>
              <span className="text-slate-400">Published:</span>
              <span className="ml-2 text-slate-300">
                {cve.published_time ? new Date(cve.published_time).toLocaleDateString() : "N/A"}
              </span>
            </div>
            <div>
              <span className="text-slate-400">References:</span>
              <span className="ml-2 text-slate-300">{cve.references?.length || 0}</span>
            </div>
          </div>

          {/* Action Recommendations */}
          {cve.propose_action && (
            <div className="mb-3 p-3 bg-blue-900/20 border border-blue-500/30 rounded text-xs">
              <div className="text-blue-400 font-medium mb-1 flex items-center gap-2">
                <Info className="w-3 h-3" />
                Recommended Action:
              </div>
              <div className="text-blue-300">{cve.propose_action}</div>
            </div>
          )}

          {/* Ransomware Campaign Info */}
          {cve.ransomware_campaign && (
            <div className="mb-3 p-3 bg-purple-900/20 border border-purple-500/30 rounded text-xs">
              <div className="text-purple-400 font-medium mb-1 flex items-center gap-2">
                <Skull className="w-3 h-3" />
                Ransomware Campaign:
              </div>
              <div className="text-purple-300">{cve.ransomware_campaign}</div>
            </div>
          )}

          {/* Footer Actions */}
          <div className="flex items-center justify-between pt-2 border-t border-slate-700">
            <div className="text-xs text-slate-400">
              Risk Factors: CVSS({riskAnalysis.factors.cvssContribution.toFixed(0)}) + EPSS(
              {riskAnalysis.factors.epssContribution.toFixed(0)})
              {riskAnalysis.factors.kevBonus > 0 && ` + KEV(${riskAnalysis.factors.kevBonus})`}
              {riskAnalysis.factors.ransomwareBonus > 0 && ` + Ransomware(${riskAnalysis.factors.ransomwareBonus})`}
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => window.open(`https://nvd.nist.gov/vuln/detail/${cve.cve_id}`, "_blank")}
                className="text-slate-400 hover:text-cyan-400"
              >
                <ExternalLink className="w-3 h-3" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="bg-slate-900/40 border-slate-700/50 backdrop-blur-xl">
      <CardHeader>
        <CardTitle className="text-red-400 flex items-center gap-2">
          <Shield className="w-5 h-5" />
          Comprehensive CVE Intelligence Center 🦇
          <Badge variant="outline" className="text-red-400 border-red-400">
            CVEDB Pro Max
          </Badge>
          {apiHealth && (
            <Badge
              variant="outline"
              className={`text-xs ${
                apiHealth.status === "online"
                  ? "text-green-400 border-green-400"
                  : apiHealth.status === "degraded"
                    ? "text-yellow-400 border-yellow-400"
                    : "text-red-400 border-red-400"
              }`}
            >
              {apiHealth.status === "online" ? (
                <CheckCircle className="w-3 h-3 mr-1" />
              ) : apiHealth.status === "degraded" ? (
                <AlertCircle className="w-3 h-3 mr-1" />
              ) : (
                <XCircle className="w-3 h-3 mr-1" />
              )}
              {apiHealth.status.toUpperCase()}
            </Badge>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Error Display */}
        {error && (
          <Card className="bg-red-900/20 border-red-500/30 p-4">
            <div className="flex items-center gap-3 text-red-400">
              <AlertTriangle className="w-5 h-5" />
              <div>
                <h4 className="font-medium">CVE Data Error</h4>
                <p className="text-sm text-red-300">{error}</p>
              </div>
            </div>
          </Card>
        )}

        {/* Loading State */}
        {loading && (
          <div className="flex items-center justify-center py-8">
            <Loader2 className="w-6 h-6 animate-spin text-cyan-400 mr-2" />
            <span className="text-slate-400">Loading comprehensive CVE intelligence...</span>
          </div>
        )}

        {/* Tab Navigation */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-5 bg-slate-800/30 border-slate-700">
            {product && (
              <TabsTrigger value="product" className="data-[state=active]:bg-red-600">
                <Target className="w-4 h-4 mr-2" />
                Product Intel
              </TabsTrigger>
            )}

            {cveIds && cveIds.length > 0 && (
              <TabsTrigger value="specific" className="data-[state=active]:bg-orange-600">
                <AlertTriangle className="w-4 h-4 mr-2" />
                Detected CVEs
              </TabsTrigger>
            )}

            <TabsTrigger value="trending" className="data-[state=active]:bg-purple-600">
              <TrendingUp className="w-4 h-4 mr-2" />
              Trending
            </TabsTrigger>

            <TabsTrigger value="analytics" className="data-[state=active]:bg-green-600">
              <BarChart3 className="w-4 h-4 mr-2" />
              Analytics
            </TabsTrigger>

            <TabsTrigger value="health" className="data-[state=active]:bg-blue-600">
              <Activity className="w-4 h-4 mr-2" />
              API Health
            </TabsTrigger>
          </TabsList>

          {/* Product Intelligence Tab */}
          <TabsContent value="product" className="space-y-6">
            {vulnIntel && !loading && (
              <div className="space-y-6">
                {/* Executive Summary */}
                <Card className="bg-slate-800/30 border-slate-600">
                  <CardHeader>
                    <CardTitle className="text-white text-lg flex items-center gap-2">
                      <Gauge className="w-5 h-5 text-cyan-400" />
                      Executive Summary - {vulnIntel.product}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-cyan-400">{vulnIntel.totalCVEs}</div>
                        <div className="text-xs text-slate-400">Total CVEs</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-blue-400">{vulnIntel.totalCPEs}</div>
                        <div className="text-xs text-slate-400">Total CPEs</div>
                      </div>
                      <div className="text-center">
                        <div
                          className={`text-2xl font-bold ${
                            vulnIntel.analytics.riskLevel === "critical"
                              ? "text-red-400"
                              : vulnIntel.analytics.riskLevel === "high"
                                ? "text-orange-400"
                                : vulnIntel.analytics.riskLevel === "medium"
                                  ? "text-yellow-400"
                                  : "text-green-400"
                          }`}
                        >
                          {vulnIntel.analytics.riskLevel.toUpperCase()}
                        </div>
                        <div className="text-xs text-slate-400">Risk Level</div>
                      </div>
                      <div className="text-center">
                        <div
                          className={`text-2xl font-bold ${
                            vulnIntel.analytics.patchPriority === "immediate"
                              ? "text-red-400"
                              : vulnIntel.analytics.patchPriority === "high"
                                ? "text-orange-400"
                                : vulnIntel.analytics.patchPriority === "medium"
                                  ? "text-yellow-400"
                                  : "text-green-400"
                          }`}
                        >
                          {vulnIntel.analytics.patchPriority.toUpperCase()}
                        </div>
                        <div className="text-xs text-slate-400">Patch Priority</div>
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-slate-400">Average CVSS:</span>
                        <span className="ml-2 text-white font-medium">
                          {vulnIntel.analytics.averageCvss.toFixed(1)}/10
                        </span>
                      </div>
                      <div>
                        <span className="text-slate-400">Average EPSS:</span>
                        <span className="ml-2 text-white font-medium">
                          {(vulnIntel.analytics.averageEpss * 100).toFixed(1)}%
                        </span>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Severity Dashboard */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <Card className="bg-red-900/20 border-red-500/30 p-4">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-red-400">{vulnIntel.summary.criticalCount}</div>
                      <div className="text-xs text-red-300">Critical</div>
                      <div className="text-xs text-slate-400 mt-1">CVSS ≥ 9.0</div>
                    </div>
                  </Card>

                  <Card className="bg-orange-900/20 border-orange-500/30 p-4">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-orange-400">{vulnIntel.summary.highCount}</div>
                      <div className="text-xs text-orange-300">High</div>
                      <div className="text-xs text-slate-400 mt-1">CVSS 7.0-8.9</div>
                    </div>
                  </Card>

                  <Card className="bg-purple-900/20 border-purple-500/30 p-4">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-purple-400">{vulnIntel.summary.kevCount}</div>
                      <div className="text-xs text-purple-300">KEV</div>
                      <div className="text-xs text-slate-400 mt-1">Known Exploited</div>
                    </div>
                  </Card>

                  <Card className="bg-yellow-900/20 border-yellow-500/30 p-4">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-yellow-400">{vulnIntel.summary.ransomwareCount}</div>
                      <div className="text-xs text-yellow-300">Ransomware</div>
                      <div className="text-xs text-slate-400 mt-1">Campaign CVEs</div>
                    </div>
                  </Card>
                </div>

                {/* Severity Distribution */}
                <Card className="bg-slate-800/30 border-slate-600">
                  <CardHeader>
                    <CardTitle className="text-white text-lg flex items-center gap-2">
                      <BarChart3 className="w-5 h-5 text-cyan-400" />
                      Vulnerability Distribution
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {[
                        {
                          label: "Critical",
                          count: vulnIntel.summary.criticalCount,
                          color: "bg-red-500",
                          total: vulnIntel.totalCVEs,
                        },
                        {
                          label: "High",
                          count: vulnIntel.summary.highCount,
                          color: "bg-orange-500",
                          total: vulnIntel.totalCVEs,
                        },
                        {
                          label: "Medium",
                          count: vulnIntel.summary.mediumCount,
                          color: "bg-yellow-500",
                          total: vulnIntel.totalCVEs,
                        },
                        {
                          label: "Low",
                          count: vulnIntel.summary.lowCount,
                          color: "bg-green-500",
                          total: vulnIntel.totalCVEs,
                        },
                      ].map((item) => (
                        <div key={item.label} className="flex items-center gap-3">
                          <div className="w-16 text-sm text-slate-300">{item.label}</div>
                          <div className="flex-1">
                            <Progress value={item.total > 0 ? (item.count / item.total) * 100 : 0} className="h-3" />
                          </div>
                          <div className="w-12 text-sm text-slate-300 text-right">{item.count}</div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Top Risk CVEs */}
                {vulnIntel.topEpssCVEs.length > 0 && (
                  <div className="space-y-3">
                    <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                      <Zap className="w-5 h-5 text-yellow-400" />
                      Highest Risk Vulnerabilities
                    </h3>
                    <ScrollArea className="h-96">
                      <div className="space-y-3">
                        {vulnIntel.topEpssCVEs
                          .slice(0, 5)
                          .map((cve: CVEDetails) => renderComprehensiveCVECard(cve, true))}
                      </div>
                    </ScrollArea>
                  </div>
                )}

                {/* Affected CPEs */}
                {vulnIntel.affectedCPEs.length > 0 && (
                  <Card className="bg-slate-800/30 border-slate-600">
                    <CardHeader>
                      <CardTitle className="text-blue-400 text-lg flex items-center gap-2">
                        <Database className="w-5 h-5" />
                        Affected Components (CPEs) - {vulnIntel.affectedCPEs.length} found
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ScrollArea className="h-32">
                        <div className="grid grid-cols-1 gap-2">
                          {vulnIntel.affectedCPEs.map((cpe: string, index: number) => (
                            <div key={index} className="text-xs font-mono text-slate-300 bg-slate-700/30 p-2 rounded">
                              {cpe}
                            </div>
                          ))}
                        </div>
                      </ScrollArea>
                    </CardContent>
                  </Card>
                )}
              </div>
            )}
          </TabsContent>

          {/* Specific CVEs Tab */}
          <TabsContent value="specific" className="space-y-6">
            {cveDetails.length > 0 && !loading && (
              <div className="space-y-3">
                <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                  <AlertTriangle className="w-5 h-5 text-orange-400" />
                  Detected Vulnerabilities ({cveDetails.filter(Boolean).length})
                </h3>
                <ScrollArea className="h-96">
                  <div className="space-y-3">
                    {cveDetails.filter(Boolean).map((cve) => renderComprehensiveCVECard(cve!, true))}
                  </div>
                </ScrollArea>
              </div>
            )}
          </TabsContent>

          {/* Trending CVEs Tab */}
          <TabsContent value="trending" className="space-y-6">
            {trendingCVEs && !loading && (
              <div className="space-y-6">
                {/* Trending Analytics */}
                {trendingCVEs.analytics && (
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <Card className="bg-slate-800/30 border-slate-600 p-3">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-cyan-400">{trendingCVEs.analytics.totalFound}</div>
                        <div className="text-xs text-slate-400">Total Found</div>
                      </div>
                    </Card>

                    <Card className="bg-slate-800/30 border-slate-600 p-3">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-red-400">{trendingCVEs.analytics.criticalCount}</div>
                        <div className="text-xs text-slate-400">Critical</div>
                      </div>
                    </Card>

                    <Card className="bg-slate-800/30 border-slate-600 p-3">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-purple-400">{trendingCVEs.analytics.kevCount}</div>
                        <div className="text-xs text-slate-400">KEV</div>
                      </div>
                    </Card>

                    <Card className="bg-slate-800/30 border-slate-600 p-3">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-orange-400">
                          {(trendingCVEs.analytics.averageEpss * 100).toFixed(1)}%
                        </div>
                        <div className="text-xs text-slate-400">Avg EPSS</div>
                      </div>
                    </Card>
                  </div>
                )}

                {/* Trending CVEs List */}
                <div className="space-y-3">
                  <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                    <TrendingUp className="w-5 h-5 text-purple-400" />
                    Trending This Week ({trendingCVEs.metadata?.searchPeriod})
                  </h3>
                  <ScrollArea className="h-96">
                    <div className="space-y-3">
                      {trendingCVEs.cves.map((cve: CVEDetails) => renderComprehensiveCVECard(cve, true))}
                    </div>
                  </ScrollArea>
                </div>
              </div>
            )}
          </TabsContent>

          {/* Analytics Tab */}
          <TabsContent value="analytics" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Risk Distribution */}
              <Card className="bg-slate-800/30 border-slate-600">
                <CardHeader>
                  <CardTitle className="text-green-400 flex items-center gap-2">
                    <BarChart3 className="w-5 h-5" />
                    Risk Analysis
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {vulnIntel && vulnIntel.analytics ? (
                    <div className="space-y-4">
                      <div className="text-center">
                        <div className="text-4xl font-bold text-green-400 mb-2">
                          {vulnIntel.analytics.riskLevel.toUpperCase()}
                        </div>
                        <div className="text-sm text-slate-400">Overall Risk Level</div>
                      </div>

                      <div className="space-y-3">
                        <div className="flex justify-between">
                          <span className="text-slate-400">Exploitation Likelihood:</span>
                          <span className="text-orange-400 font-medium">
                            {vulnIntel.analytics.exploitationLikelihood.replace("-", " ").toUpperCase()}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-400">Patch Priority:</span>
                          <span className="text-red-400 font-medium">
                            {vulnIntel.analytics.patchPriority.toUpperCase()}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-400">Average CVSS:</span>
                          <span className="text-yellow-400 font-medium">
                            {vulnIntel.analytics.averageCvss.toFixed(1)}/10
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-400">Average EPSS:</span>
                          <span className="text-orange-400 font-medium">
                            {(vulnIntel.analytics.averageEpss * 100).toFixed(1)}%
                          </span>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center text-slate-400 py-8">
                      <Activity className="w-12 h-12 mx-auto mb-2 opacity-30" />
                      <p>No analytics data available</p>
                      <p className="text-sm">Search for a product to see risk analysis</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Timeline Analysis */}
              <Card className="bg-slate-800/30 border-slate-600">
                <CardHeader>
                  <CardTitle className="text-blue-400 flex items-center gap-2">
                    <Calendar className="w-5 h-5" />
                    Timeline Analysis
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {vulnIntel && vulnIntel.recentCVEs ? (
                    <div className="space-y-4">
                      <div className="text-center">
                        <div className="text-4xl font-bold text-blue-400 mb-2">{vulnIntel.summary.recentCount}</div>
                        <div className="text-sm text-slate-400">Recent CVEs (90 days)</div>
                      </div>

                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-slate-400">Critical (Recent):</span>
                          <span className="text-red-400 font-medium">
                            {vulnIntel.recentCVEs.filter((cve: CVEDetails) => (cve.cvss || 0) >= 9.0).length}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-400">High (Recent):</span>
                          <span className="text-orange-400 font-medium">
                            {
                              vulnIntel.recentCVEs.filter(
                                (cve: CVEDetails) => (cve.cvss || 0) >= 7.0 && (cve.cvss || 0) < 9.0,
                              ).length
                            }
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-400">KEV (Recent):</span>
                          <span className="text-purple-400 font-medium">
                            {vulnIntel.recentCVEs.filter((cve: CVEDetails) => cve.kev).length}
                          </span>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center text-slate-400 py-8">
                      <TrendingUp className="w-12 h-12 mx-auto mb-2 opacity-30" />
                      <p>No timeline data available</p>
                      <p className="text-sm">Search for a product to see timeline analysis</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* API Health Tab */}
          <TabsContent value="health" className="space-y-6">
            <Card className="bg-slate-800/30 border-slate-600">
              <CardHeader>
                <CardTitle className="text-blue-400 flex items-center gap-2">
                  <Activity className="w-5 h-5" />
                  CVEDB API Health Status
                </CardTitle>
              </CardHeader>
              <CardContent>
                {apiHealth ? (
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-slate-400">Overall Status:</span>
                      <Badge
                        variant="outline"
                        className={`${
                          apiHealth.status === "online"
                            ? "text-green-400 border-green-400"
                            : apiHealth.status === "degraded"
                              ? "text-yellow-400 border-yellow-400"
                              : "text-red-400 border-red-400"
                        }`}
                      >
                        {apiHealth.status === "online" ? (
                          <CheckCircle className="w-4 h-4 mr-1" />
                        ) : apiHealth.status === "degraded" ? (
                          <AlertCircle className="w-4 h-4 mr-1" />
                        ) : (
                          <XCircle className="w-4 h-4 mr-1" />
                        )}
                        {apiHealth.status.toUpperCase()}
                      </Badge>
                    </div>

                    <div className="flex items-center justify-between">
                      <span className="text-slate-400">Response Time:</span>
                      <span className="text-white font-medium">{apiHealth.responseTime}ms</span>
                    </div>

                    <div className="flex items-center justify-between">
                      <span className="text-slate-400">Last Check:</span>
                      <span className="text-white font-medium">{apiHealth.lastCheck.toLocaleTimeString()}</span>
                    </div>

                    <div className="space-y-2">
                      <h4 className="text-white font-medium">Endpoint Status:</h4>
                      <div className="space-y-1">
                        <div className="flex items-center justify-between">
                          <span className="text-slate-400">/cve/{"{cve_id}"}:</span>
                          {apiHealth.endpoints.cveEndpoint ? (
                            <CheckCircle className="w-4 h-4 text-green-400" />
                          ) : (
                            <XCircle className="w-4 h-4 text-red-400" />
                          )}
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-slate-400">/cves:</span>
                          {apiHealth.endpoints.cvesEndpoint ? (
                            <CheckCircle className="w-4 h-4 text-green-400" />
                          ) : (
                            <XCircle className="w-4 h-4 text-red-400" />
                          )}
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-slate-400">/cpes:</span>
                          {apiHealth.endpoints.cpesEndpoint ? (
                            <CheckCircle className="w-4 h-4 text-green-400" />
                          ) : (
                            <XCircle className="w-4 h-4 text-red-400" />
                          )}
                        </div>
                      </div>
                    </div>

                    <Button
                      onClick={checkAPIHealth}
                      variant="outline"
                      size="sm"
                      className="w-full border-slate-600 text-slate-300 bg-transparent"
                    >
                      <Activity className="w-4 h-4 mr-2" />
                      Refresh Health Check
                    </Button>
                  </div>
                ) : (
                  <div className="text-center text-slate-400 py-8">
                    <Activity className="w-12 h-12 mx-auto mb-2 opacity-30" />
                    <p>Loading API health status...</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Educational Note */}
        <Card className="bg-red-900/20 border-red-500/30">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <Eye className="w-5 h-5 text-red-400 mt-0.5" />
              <div>
                <h4 className="font-medium text-red-400 mb-1">Comprehensive CVE Intelligence 🧛‍♂️</h4>
                <p className="text-sm text-red-300">
                  This comprehensive panel provides enterprise-grade vulnerability intelligence using the complete CVEDB
                  API. Features include comprehensive risk scoring, EPSS exploitation predictions, KEV tracking,
                  ransomware campaign associations, and full pagination support for large datasets. Use this
                  intelligence to make informed security decisions and prioritize remediation efforts effectively.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </CardContent>
    </Card>
  )
}
