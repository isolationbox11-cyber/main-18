"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { AlertTriangle, Shield, TrendingUp, Clock, ExternalLink, Zap, Target, Skull, Eye } from "lucide-react"
import {
  getProductVulnerabilityIntel,
  getCVEDetails,
  getLatestCVEs,
  getCVSSSeverity,
  formatEPSSScore,
  isRecentCVE,
  type CVEDetails,
} from "@/lib/cvedb-client"

interface CVEIntelligencePanelProps {
  product?: string
  cveIds?: string[]
}

export function CVEIntelligencePanel({ product, cveIds }: CVEIntelligencePanelProps) {
  const [vulnIntel, setVulnIntel] = useState<any>(null)
  const [cveDetails, setCveDetails] = useState<CVEDetails[]>([])
  const [latestCVEs, setLatestCVEs] = useState<CVEDetails[]>([])
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState<"product" | "specific" | "trending">("product")

  useEffect(() => {
    if (product) {
      loadProductIntelligence()
    }
    if (cveIds && cveIds.length > 0) {
      loadSpecificCVEs()
    }
    loadLatestCVEs()
  }, [product, cveIds])

  const loadProductIntelligence = async () => {
    if (!product) return

    setLoading(true)
    try {
      const intel = await getProductVulnerabilityIntel(product)
      setVulnIntel(intel)
    } catch (error) {
      console.error("Failed to load product intelligence:", error)
    } finally {
      setLoading(false)
    }
  }

  const loadSpecificCVEs = async () => {
    if (!cveIds || cveIds.length === 0) return

    setLoading(true)
    try {
      const details = await Promise.all(cveIds.map((id) => getCVEDetails(id)))
      setCveDetails(details.filter(Boolean) as CVEDetails[])
    } catch (error) {
      console.error("Failed to load CVE details:", error)
    } finally {
      setLoading(false)
    }
  }

  const loadLatestCVEs = async () => {
    try {
      const result = await getLatestCVEs({
        sortByEpss: true,
        limit: 10,
      })
      setLatestCVEs(result.cves)
    } catch (error) {
      console.error("Failed to load latest CVEs:", error)
    }
  }

  const renderCVECard = (cve: CVEDetails, showProduct = false) => {
    const severity = getCVSSSeverity(cve.cvss)
    const isRecent = isRecentCVE(cve.published_time)

    return (
      <Card key={cve.cve_id} className="bg-slate-800/30 border-slate-600">
        <CardContent className="p-4">
          <div className="flex items-start justify-between mb-3">
            <div className="flex items-center gap-2">
              <h4 className="font-mono text-cyan-400 font-medium">{cve.cve_id}</h4>
              {isRecent && (
                <Badge variant="outline" className="text-green-400 border-green-400 text-xs">
                  <Clock className="w-3 h-3 mr-1" />
                  NEW
                </Badge>
              )}
            </div>

            <div className="flex items-center gap-2">
              {cve.kev && (
                <Badge variant="destructive" className="text-xs bg-red-500/20 text-red-400">
                  <Target className="w-3 h-3 mr-1" />
                  KEV
                </Badge>
              )}

              {cve.ransomware_campaign && (
                <Badge variant="destructive" className="text-xs bg-purple-500/20 text-purple-400">
                  <Skull className="w-3 h-3 mr-1" />
                  RANSOMWARE
                </Badge>
              )}

              <Badge className={`text-xs ${severity.color} border-current/30 bg-current/10`}>
                {severity.label} {cve.cvss?.toFixed(1)}
              </Badge>
            </div>
          </div>

          <p className="text-slate-300 text-sm mb-3 line-clamp-2">{cve.summary || "No description available"}</p>

          <div className="grid grid-cols-2 gap-4 text-xs mb-3">
            <div>
              <span className="text-slate-400">EPSS Score:</span>
              <span className="ml-2 text-orange-400 font-medium">{formatEPSSScore(cve.epss)}</span>
            </div>
            <div>
              <span className="text-slate-400">Published:</span>
              <span className="ml-2 text-slate-300">{new Date(cve.published_time).toLocaleDateString()}</span>
            </div>
          </div>

          {cve.propose_action && (
            <div className="mb-3 p-2 bg-blue-900/20 border border-blue-500/30 rounded text-xs">
              <div className="text-blue-400 font-medium mb-1">Recommended Action:</div>
              <div className="text-blue-300">{cve.propose_action}</div>
            </div>
          )}

          <div className="flex items-center justify-between">
            <div className="text-xs text-slate-400">
              {cve.references.length} reference{cve.references.length !== 1 ? "s" : ""}
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => window.open(`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${cve.cve_id}`, "_blank")}
              className="text-slate-400 hover:text-cyan-400"
            >
              <ExternalLink className="w-3 h-3" />
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="bg-slate-900/40 border-slate-700/50 backdrop-blur-xl">
      <CardHeader>
        <CardTitle className="text-red-400 flex items-center gap-2">
          <Shield className="w-5 h-5" />
          CVE Intelligence Center 🦇
          <Badge variant="outline" className="text-red-400 border-red-400">
            CVEDB
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Tab Navigation */}
        <div className="flex gap-2">
          {product && (
            <Button
              variant={activeTab === "product" ? "default" : "outline"}
              size="sm"
              onClick={() => setActiveTab("product")}
              className={activeTab === "product" ? "bg-red-600" : "border-slate-600 text-slate-300 bg-transparent"}
            >
              <Target className="w-4 h-4 mr-2" />
              Product Intel
            </Button>
          )}

          {cveIds && cveIds.length > 0 && (
            <Button
              variant={activeTab === "specific" ? "default" : "outline"}
              size="sm"
              onClick={() => setActiveTab("specific")}
              className={activeTab === "specific" ? "bg-orange-600" : "border-slate-600 text-slate-300 bg-transparent"}
            >
              <AlertTriangle className="w-4 h-4 mr-2" />
              Detected CVEs
            </Button>
          )}

          <Button
            variant={activeTab === "trending" ? "default" : "outline"}
            size="sm"
            onClick={() => setActiveTab("trending")}
            className={activeTab === "trending" ? "bg-purple-600" : "border-slate-600 text-slate-300 bg-transparent"}
          >
            <TrendingUp className="w-4 h-4 mr-2" />
            Trending
          </Button>
        </div>

        {/* Product Intelligence Tab */}
        {activeTab === "product" && vulnIntel && (
          <div className="space-y-4">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Card className="bg-slate-800/30 border-slate-600 p-3">
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-400">{vulnIntel.criticalCVEs.length}</div>
                  <div className="text-xs text-slate-400">Critical</div>
                </div>
              </Card>

              <Card className="bg-slate-800/30 border-slate-600 p-3">
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-400">{vulnIntel.highCVEs.length}</div>
                  <div className="text-xs text-slate-400">High</div>
                </div>
              </Card>

              <Card className="bg-slate-800/30 border-slate-600 p-3">
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-400">{vulnIntel.kevCVEs.length}</div>
                  <div className="text-xs text-slate-400">KEV</div>
                </div>
              </Card>

              <Card className="bg-slate-800/30 border-slate-600 p-3">
                <div className="text-center">
                  <div className="text-2xl font-bold text-yellow-400">{vulnIntel.ransomwareCVEs.length}</div>
                  <div className="text-xs text-slate-400">Ransomware</div>
                </div>
              </Card>
            </div>

            <div className="space-y-3">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <Zap className="w-5 h-5 text-yellow-400" />
                Recent Vulnerabilities
              </h3>
              {vulnIntel.recentCVEs.map((cve: CVEDetails) => renderCVECard(cve))}
            </div>
          </div>
        )}

        {/* Specific CVEs Tab */}
        {activeTab === "specific" && cveDetails.length > 0 && (
          <div className="space-y-3">
            <h3 className="text-lg font-semibold text-white flex items-center gap-2">
              <AlertTriangle className="w-5 h-5 text-orange-400" />
              Detected Vulnerabilities
            </h3>
            {cveDetails.map((cve) => renderCVECard(cve))}
          </div>
        )}

        {/* Trending CVEs Tab */}
        {activeTab === "trending" && (
          <div className="space-y-3">
            <h3 className="text-lg font-semibold text-white flex items-center gap-2">
              <TrendingUp className="w-5 h-5 text-purple-400" />
              Trending Vulnerabilities
            </h3>
            {latestCVEs.slice(0, 5).map((cve) => renderCVECard(cve))}
          </div>
        )}

        {/* Educational Note */}
        <Card className="bg-red-900/20 border-red-500/30">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <Eye className="w-5 h-5 text-red-400 mt-0.5" />
              <div>
                <h4 className="font-medium text-red-400 mb-1">Understanding CVE Intelligence 🧛‍♂️</h4>
                <p className="text-sm text-red-300">
                  CVE (Common Vulnerabilities and Exposures) data helps identify security weaknesses in software. KEV
                  indicates known exploitation, EPSS predicts exploitation likelihood, and CVSS measures severity. Use
                  this intelligence to prioritize security patches and defensive measures.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </CardContent>
    </Card>
  )
}
